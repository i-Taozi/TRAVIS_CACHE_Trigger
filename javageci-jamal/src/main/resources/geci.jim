
Calculate the simple name of the class from the fully qualified name.
To do that we use the 'replace' macro from the snippet module.
The calculation does a replaceAll type replace replacing the fully qualified class name with the part that comes after the last dot.

{%@define simpleName($class)={%#replace (regex)|$class|.*\.(.*)|$1%}%}

define the argument separator that comes from the macro methods
{%@define argsep(:argsep)={%@define $argsep=:argsep%}%}
define the exceptions separator that comes from the macro methods
{%@define exsep(:exsep)={%@define $exsep=:exsep%}%}

{%@define setter(name)=set{%`#cap name%}%}
{%@define getter(name,type)={%`#if/{%#equals/{%#replace type B b%}/boolean%}/is/get%}{%`@cap name%}%}

{%@define isPrivate(:x)={%@contains private :x%}%}
{%@define isProtected(:x)={%@contains protected :x%}%}
{%@define isPublic(:x)={%@contains public :x%}%}
{%@define isFinal(:x)={%@contains final :x%}%}
{%@define isStatic(:x)={%@contains static :x%}%}
{%@define isSynchronized(:x)={%@contains synchronized :x%}%}
{%@define isStrict(:x)={%@contains strictfp :x%}%}
{%@define isAbstract(:x)={%@contains abstract :x%}%}
{%@define isVolatile(:x)={%@contains volatile :x%}%}
{%@define isTransient(:x)={%@contains transient :x%}%}

{%@define beginCode(:x)=//<editor-fold desc=":x">%}
{%@define endCode()=//</editor-fold>%}