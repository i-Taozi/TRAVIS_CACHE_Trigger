/*
 * This file is generated by jOOQ.
 */
package com.git.hui.boot.jooq.h2.tables;


import com.git.hui.boot.jooq.h2.Indexes;
import com.git.hui.boot.jooq.h2.Keys;
import com.git.hui.boot.jooq.h2.Public;
import com.git.hui.boot.jooq.h2.tables.records.PoetPO;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoetTB extends TableImpl<PoetPO> {

    private static final long serialVersionUID = 1284674459;

    /**
     * The reference instance of <code>PUBLIC.POET</code>
     */
    public static final PoetTB POET = new PoetTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoetPO> getRecordType() {
        return PoetPO.class;
    }

    /**
     * The column <code>PUBLIC.POET.ID</code>.
     */
    public final TableField<PoetPO, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POET.NAME</code>.
     */
    public final TableField<PoetPO, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>PUBLIC.POET</code> table reference
     */
    public PoetTB() {
        this(DSL.name("POET"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.POET</code> table reference
     */
    public PoetTB(String alias) {
        this(DSL.name(alias), POET);
    }

    /**
     * Create an aliased <code>PUBLIC.POET</code> table reference
     */
    public PoetTB(Name alias) {
        this(alias, POET);
    }

    private PoetTB(Name alias, Table<PoetPO> aliased) {
        this(alias, aliased, null);
    }

    private PoetTB(Name alias, Table<PoetPO> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PoetTB(Table<O> child, ForeignKey<O, PoetPO> key) {
        super(child, key, POET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    @Override
    public UniqueKey<PoetPO> getPrimaryKey() {
        return Keys.PK_T_POET;
    }

    @Override
    public List<UniqueKey<PoetPO>> getKeys() {
        return Arrays.<UniqueKey<PoetPO>>asList(Keys.PK_T_POET);
    }

    @Override
    public PoetTB as(String alias) {
        return new PoetTB(DSL.name(alias), this);
    }

    @Override
    public PoetTB as(Name alias) {
        return new PoetTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetTB rename(String name) {
        return new PoetTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetTB rename(Name name) {
        return new PoetTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
