/*
 * This file is generated by jOOQ.
 */
package com.git.hui.boot.jooq.h2.tables;


import com.git.hui.boot.jooq.h2.Indexes;
import com.git.hui.boot.jooq.h2.Keys;
import com.git.hui.boot.jooq.h2.Public;
import com.git.hui.boot.jooq.h2.tables.records.PoetryPO;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoetryTB extends TableImpl<PoetryPO> {

    private static final long serialVersionUID = -1039567877;

    /**
     * The reference instance of <code>PUBLIC.POETRY</code>
     */
    public static final PoetryTB POETRY = new PoetryTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoetryPO> getRecordType() {
        return PoetryPO.class;
    }

    /**
     * The column <code>PUBLIC.POETRY.ID</code>.
     */
    public final TableField<PoetryPO, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POETRY.POET_ID</code>.
     */
    public final TableField<PoetryPO, Integer> POET_ID = createField(DSL.name("POET_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("'0'", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.POETRY.TITLE</code>.
     */
    public final TableField<PoetryPO, String> TITLE = createField(DSL.name("TITLE"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.POETRY.CONTENT</code>.
     */
    public final TableField<PoetryPO, String> CONTENT = createField(DSL.name("CONTENT"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.POETRY.CREATE_AT</code>. 创建时间
     */
    public final TableField<PoetryPO, Timestamp> CREATE_AT = createField(DSL.name("CREATE_AT"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * Create a <code>PUBLIC.POETRY</code> table reference
     */
    public PoetryTB() {
        this(DSL.name("POETRY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.POETRY</code> table reference
     */
    public PoetryTB(String alias) {
        this(DSL.name(alias), POETRY);
    }

    /**
     * Create an aliased <code>PUBLIC.POETRY</code> table reference
     */
    public PoetryTB(Name alias) {
        this(alias, POETRY);
    }

    private PoetryTB(Name alias, Table<PoetryPO> aliased) {
        this(alias, aliased, null);
    }

    private PoetryTB(Name alias, Table<PoetryPO> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PoetryTB(Table<O> child, ForeignKey<O, PoetryPO> key) {
        super(child, key, POETRY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_8);
    }

    @Override
    public UniqueKey<PoetryPO> getPrimaryKey() {
        return Keys.PK_T_POETRY;
    }

    @Override
    public List<UniqueKey<PoetryPO>> getKeys() {
        return Arrays.<UniqueKey<PoetryPO>>asList(Keys.PK_T_POETRY);
    }

    @Override
    public PoetryTB as(String alias) {
        return new PoetryTB(DSL.name(alias), this);
    }

    @Override
    public PoetryTB as(Name alias) {
        return new PoetryTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetryTB rename(String name) {
        return new PoetryTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetryTB rename(Name name) {
        return new PoetryTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
