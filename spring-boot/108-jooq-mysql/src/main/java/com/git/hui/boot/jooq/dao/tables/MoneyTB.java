/*
 * This file is generated by jOOQ.
 */
package com.git.hui.boot.jooq.dao.tables;


import com.git.hui.boot.jooq.dao.Indexes;
import com.git.hui.boot.jooq.dao.Keys;
import com.git.hui.boot.jooq.dao.Test;
import com.git.hui.boot.jooq.dao.tables.records.MoneyPO;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MoneyTB extends TableImpl<MoneyPO> {

    private static final long serialVersionUID = 282200469;

    /**
     * The reference instance of <code>test.money</code>
     */
    public static final MoneyTB MONEY = new MoneyTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoneyPO> getRecordType() {
        return MoneyPO.class;
    }

    /**
     * The column <code>test.money.id</code>.
     */
    public final TableField<MoneyPO, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.money.name</code>. 用户名
     */
    public final TableField<MoneyPO, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>test.money.money</code>. 钱
     */
    public final TableField<MoneyPO, Integer> MONEY_ = createField(DSL.name("money"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "钱");

    /**
     * The column <code>test.money.is_deleted</code>.
     */
    public final TableField<MoneyPO, Byte> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>test.money.create_at</code>. 创建时间
     */
    public final TableField<MoneyPO, Timestamp> CREATE_AT = createField(DSL.name("create_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>test.money.update_at</code>. 更新时间
     */
    public final TableField<MoneyPO, Timestamp> UPDATE_AT = createField(DSL.name("update_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * Create a <code>test.money</code> table reference
     */
    public MoneyTB() {
        this(DSL.name("money"), null);
    }

    /**
     * Create an aliased <code>test.money</code> table reference
     */
    public MoneyTB(String alias) {
        this(DSL.name(alias), MONEY);
    }

    /**
     * Create an aliased <code>test.money</code> table reference
     */
    public MoneyTB(Name alias) {
        this(alias, MONEY);
    }

    private MoneyTB(Name alias, Table<MoneyPO> aliased) {
        this(alias, aliased, null);
    }

    private MoneyTB(Name alias, Table<MoneyPO> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MoneyTB(Table<O> child, ForeignKey<O, MoneyPO> key) {
        super(child, key, MONEY);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MONEY_NAME, Indexes.MONEY_PRIMARY);
    }

    @Override
    public Identity<MoneyPO, UInteger> getIdentity() {
        return Keys.IDENTITY_MONEY;
    }

    @Override
    public UniqueKey<MoneyPO> getPrimaryKey() {
        return Keys.KEY_MONEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MoneyPO>> getKeys() {
        return Arrays.<UniqueKey<MoneyPO>>asList(Keys.KEY_MONEY_PRIMARY);
    }

    @Override
    public MoneyTB as(String alias) {
        return new MoneyTB(DSL.name(alias), this);
    }

    @Override
    public MoneyTB as(Name alias) {
        return new MoneyTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTB rename(String name) {
        return new MoneyTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTB rename(Name name) {
        return new MoneyTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, String, Integer, Byte, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
